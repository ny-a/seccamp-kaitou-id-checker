{"version":3,"sources":["features/checker/Checker.module.css","app/hooks.ts","features/checker/checkerSlice.ts","features/checker/ids.ts","features/checker/CheckerInput.tsx","features/checker/CheckerResult.tsx","features/checker/Checker.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","checkerSlice","createSlice","name","initialState","id","reducers","setId","state","action","payload","actions","selectId","checker","idLists","url","isInIdRange","parseInt","CheckerInput","dispatch","useState","newId","setNewId","newIdValue","String","sourceList","map","idList","href","className","styles","row","noValidate","autoComplete","onSubmit","Grid","TextField","label","variant","value","onChange","e","target","Button","onClick","aside","CheckerResult","matchingIdList","find","result","Checker","App","AppBar","position","Toolbar","Typography","Container","maxWidth","store","configureStore","reducer","checkerReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0270b706.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Checker_row__oM9NK\",\"value\":\"Checker_value__2r9tr\",\"button\":\"Checker_button__2Fu8z\",\"textbox\":\"Checker_textbox__3Ed5u\",\"asyncButton\":\"Checker_asyncButton__IsEEJ Checker_button__2Fu8z\",\"aside\":\"Checker_aside__35UY2\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface CheckerState {\n  id: string;\n}\n\nconst initialState: CheckerState = {\n  id: '',\n};\n\n\nexport const checkerSlice = createSlice({\n  name: 'checker',\n  initialState,\n  reducers: {\n    setId: (state, action: PayloadAction<string>) => {\n      state.id = action.payload;\n    },\n  },\n});\n\nexport const { setId } = checkerSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.checker.value)`\nexport const selectId = (state: RootState) => state.checker.id;\n\nexport default checkerSlice.reducer;\n","\ninterface IDList {\n  name: string;\n  url: string;\n  isInIdRange: (id: string) => boolean;\n}\n\nconst nextCamp: IDList = {\n  name: 'ネクストキャンプ',\n  url: 'https://www.ipa.go.jp/files/000091508.pdf',\n  isInIdRange(id: string) {\n    return parseInt(id) < 100;\n  },\n}\n\nconst secCamp: IDList = {\n  name: '全国大会',\n  url: 'https://www.ipa.go.jp/files/000091507.pdf',\n  isInIdRange(id: string) {\n    return parseInt(id) >= 100;\n  },\n}\n\nexport const idLists = [nextCamp, secCamp];\n","import React, { useState } from 'react';\n\nimport { useAppDispatch } from '../../app/hooks';\nimport { setId } from './checkerSlice';\nimport styles from './Checker.module.css';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { idLists } from './ids';\n\nexport function CheckerInput() {\n  const dispatch = useAppDispatch();\n  const [newId, setNewId] = useState('');\n\n  const newIdValue = String(newId) || '';\n\n  const sourceList = idLists.map(idList => (<div><a href={idList.url}>{idList.name} 公式 PDF</a><br /></div>));\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <span>SecCamp/SecNextCamp '21 非公式 回答ID Checker</span>\n      </div>\n      <div className={styles.row}>\n        <form noValidate autoComplete=\"off\" onSubmit={() => dispatch(setId(newIdValue))}>\n          <Grid>\n            <TextField id=\"outlined-basic\" label=\"回答者ID\" variant=\"outlined\"\n              value={newId}\n              onChange={(e) => setNewId(e.target.value)} />\n          </Grid>\n          <Grid>\n            <Button variant=\"contained\" onClick={() => dispatch(setId(newIdValue))}>\n              通過しているか確認する\n            </Button>\n          </Grid>\n        </form>\n      </div>\n      <div>\n        <aside className={styles.aside}>\n          {sourceList}\n        </aside>\n      </div>\n    </div>\n  );\n}\n","import Button from '@material-ui/core/Button';\nimport React from 'react';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { setId, selectId } from './checkerSlice';\nimport { idLists } from './ids';\n\nexport function CheckerResult() {\n  const id = useAppSelector(selectId);\n  const dispatch = useAppDispatch();\n\n  const matchingIdList = idLists.find(idList => idList.isInIdRange(id));\n\n  const result = matchingIdList ? (\n    <div>\n      {matchingIdList.name}に通過しているか\n      <a href={matchingIdList.url}>公式 PDF</a> で確認する\n    </div>\n  ) : (\n    <p>回答IDを確認してください。</p>\n  );\n\n  return (\n    <div>\n      {result}\n      <Button variant=\"contained\" onClick={() => dispatch(setId(''))}>戻る</Button>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { useAppSelector } from '../../app/hooks';\nimport {\n  selectId,\n} from './checkerSlice';\nimport { CheckerInput } from './CheckerInput';\nimport { CheckerResult } from './CheckerResult';\n\nexport function Checker() {\n  const id = useAppSelector(selectId);\n\n  if (id === '') {\n    return (<CheckerInput />);\n  } else {\n    return (<CheckerResult />);\n  }\n}\n","import React from 'react';\nimport { Checker } from './features/checker/Checker';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">\n            SecCamp/SecNextCamp '21 非公式 回答ID Checker\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth=\"md\">\n        <header className=\"App-header\">\n          <Checker />\n        </header>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport checkerReducer from '../features/checker/checkerSlice';\n\nexport const store = configureStore({\n  reducer: {\n    checker: checkerReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}